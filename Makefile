export BUILD_TOPDIR=$(PWD)
export STAGING_DIR=/home/a/1980490718/openwrt-sdk-ipq806x-qsdk53/staging_dir
export TOOLPATH=$(STAGING_DIR)/toolchain-arm_cortex-a7_gcc-4.8-linaro_uClibc-1.0.14_eabi/
export PATH:=$(TOOLPATH)/bin:${PATH}
export MAKECMD=make --silent ARCH=arm CROSS_COMPILE=arm-openwrt-linux-

# Copyright (C) 2023 OpenWrt QSDK for IPQ40xx boards
# This Makefile is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# This Makefile is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with this Makefile; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
# SPDX-License-Identifier: GPL-2.0-or-later
# This Makefile is used to build U-Boot for IPQ40xx boards in OpenWrt QSDK for IPQ40xx boards.

# Makefile for building U-Boot for IPQ40xx boards.
# This Makefile is designed to work with OpenWrt QSDK for IPQ40xx boards.
# It automatically detects supported boards and builds U-Boot for each one of them in a single command or multiple commands for specific boards.
# It also provides a clean target to remove build files and a clean_all target to remove binary images and build files.

# Usage: make [board-name1] [board-name2...]
# Example: make cdp
# Example: make all
# Example: make clean
# Example: make clean_all
# Example: make help

# Define the supported boards list for IPQ40xx boards in OpenWrt QSDK for IPQ40xx boards.
# You can add more boards here as you add support for them in the U-Boot source code.
# The boards list is automatically generated by finding all the ipq40xx_*.h files in the uboot/include/configs directory.
# The board name should match the directory name in uboot/include/configs
# The board names should be in the format ipq40xx_<board_name>.h
# The board name should be unique and should not conflict with other boards in the list.
# For example: ipq40xx_cdp.h, ipq40xx_board1.h, ipq40xx_board2.h, etc.
# The board names will be used to generate build rules dynamically in the Makefile.
# Define the path to the U-Boot source directory as uboot/
# The board names are extracted from the file names and sorted alphabetically.

# The Makefile will generate build rules for each board found in the uboot/include/configs directory.
# The build rules will be generated dynamically using the BOARD_template macro.
# The BOARD_template macro takes a board name as input and generates a build rule for that board.
# The build rule first checks if the board name is cdp.
# If it is cdp, it sets the UBOOT_FILE_NAME variable to openwrt-ipq40xx-u-boot-stripped.elf.
# If it is not cdp, it sets the UBOOT_FILE_NAME variable to openwrt-<board_name>-u-boot-stripped.elf
# The build rule then prints a message indicating that the board is being built.
# The build rule then runs the ipq40xx_<board_name>_config command to configure U-Boot for the board.
# The build rule then runs the make command to build U-Boot for the board.
# and strips it using sstrip.
# If it is not cdp, it copies the u-boot binary to bin/openwrt-<board_name>-u-boot-stripped.elf
# The build rule then prints a message indicating that the build is completed.
# The build rule then creates a ZIP package for the board.
# The ZIP package is created by zipping the stripped ELF file in the bin/ directory.

# The build rule then creates a ZIP package for the board.
# The ZIP package is named openwrt-ipq40xx-u-boot-stripped.zip for cdp.
# and openwrt-<board_name>-u-boot-stripped.zip for other boards.
# The ZIP package is created using the zip command with -9 option for maximum compression.
# The -j option is used to create a ZIP file without directory structure.
# The ZIP package is created in the bin/ directory of the build top directory.

# The boards list is generated dynamically by finding all the ipq40xx_*.h files in the uboot/include/configs directory
BOARDS := $(shell find uboot/include/configs -maxdepth 1 -name 'ipq40xx_*.h' 2>/dev/null | sed 's|.*/ipq40xx_||; s|\.h$$||' | sort)

# boot delay (time to autostart boot command)
export CONFIG_BOOTDELAY=1

# Default target
all: $(BOARDS)

# Help message
help:
	@echo "Usage: make [board-name1] [board-name2 ...]"
	@echo ""
	@echo "Command list:"
	@echo "  all           Build all boards"
	@echo "  clean         Clean build files"
	@echo "  clean_all     Clean build files and remove bin/ products"
	@echo "  help          Show this help message"
	@echo ""
	@echo "Supported boards:"
	@for board in $(BOARDS); do \
		echo "  - $$board"; \
	done

# Board compilation template
define BOARD_template
$(1): 
	@mkdir -p $$(BUILD_TOPDIR)/bin
	@echo "===> Building board: $(1)"
	@cd $$(BUILD_TOPDIR)/uboot/ && $$(MAKECMD) ipq40xx_$(1)_config
	@cd $$(BUILD_TOPDIR)/uboot/ && $$(MAKECMD) ENDIANNESS=-EB V=1 all
	@if [ "$(1)" = "cdp" ]; then \
		cp $$(BUILD_TOPDIR)/uboot/u-boot $$(BUILD_TOPDIR)/bin/openwrt-ipq40xx-u-boot-stripped.elf; \
		$(STAGING_DIR)/host/bin/sstrip $$(BUILD_TOPDIR)/bin/openwrt-ipq40xx-u-boot-stripped.elf; \
		echo "Build completed: openwrt-ipq40xx-u-boot-stripped.elf"; \
		echo "===> Creating ZIP package for ipq40xx"; \
		cd $$(BUILD_TOPDIR)/bin && zip -9 -j openwrt-ipq40xx-u-boot-stripped.zip openwrt-ipq40xx-u-boot-stripped.elf; \
		echo "Package created: openwrt-ipq40xx-u-boot-stripped.zip"; \
	else \
		cp $$(BUILD_TOPDIR)/uboot/u-boot $$(BUILD_TOPDIR)/bin/openwrt-$(1)-u-boot-stripped.elf; \
		$(STAGING_DIR)/host/bin/sstrip $$(BUILD_TOPDIR)/bin/openwrt-$(1)-u-boot-stripped.elf; \
		echo "Build completed: openwrt-$(1)-u-boot-stripped.elf"; \
		echo "===> Creating ZIP package for $(1)"; \
		cd $$(BUILD_TOPDIR)/bin && zip -9 -j openwrt-$(1)-u-boot-stripped.zip openwrt-$(1)-u-boot-stripped.elf; \
		echo "Package created: openwrt-$(1)-u-boot-stripped.zip"; \
	fi
endef

# Generate build rules for each board
$(foreach board,$(BOARDS),$(eval $(call BOARD_template,$(board))))

clean:
	@echo "Cleaning u-boot build files..."
	@cd $(BUILD_TOPDIR)/uboot/ && $(MAKECMD) distclean
	@echo "Removing httpd/fsdata.c..."
	@rm -f $(BUILD_TOPDIR)/uboot/httpd/fsdata.c
	@echo "Clean completed"

clean_all:	clean
	@echo Removing all binary images
	@rm -f $(BUILD_TOPDIR)/bin/*.elf
	@rm -f $(BUILD_TOPDIR)/bin/*.zip
	@echo "Clean all completed"